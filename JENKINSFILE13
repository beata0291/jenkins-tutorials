pipeline {

  options {
    buildDiscarder(logRotator(numToKeepStr: '20'))
    timestamps()
  }
  
   tools { 
        maven 'maven 3.6.1'
        jdk 'AdoptOpenJDK 11.0.11.9-hotspot'
    }
  
  environment {
      NEW_VERSION = '1.3.3'
  }
  parameters {
        string(defaultValue: "", description: 'Nazwa pliku dumpa bazy danych', name: 'nameDumpDB', trim: true)
        choice(choices: ['qa1','qa2','qa4','qa5','qa6','qa7','qa8','qa9','qa10'], description: 'Nazwa środowiska, na którym chcemy wykonać dump bazy danych', name: 'envName')
        choice(choices: ['','yes','no'], description: 'Czy po ubiciu Tomcata włączyć go ponownie ?', name: 'startTomcat')
        booleanParam(name: 'executeTest', defaultValue: true, description:'Czy wykonać testy?')
    }

  agent any
  
  stages{
    stage('Dump bazy danych') {
      steps {
        script {
            if (params.nameDumpDB == '') {
            error("Nie podano nazwy dla dumpa")
            }
            else {
               buildName "#${BUILD_NUMBER} ${params.envName} ${params.nameDumpDB}"
            buildDescription "Executed @ ${NODE_NAME}"
                println "Dump have done for $envName:"
            }
            
          }
        }
      }
      stage('build and Deploy') {
            steps {
                echo "Hello"
                script {
                       
                        try{
                            sh 'docker image rm -f kamal'
                        } catch (Exception e) {
                            echo 'Exception occurred'
                        }
                      
                    }
                }
        }
        stage('Unit tests') {
                when {
                    expression {
                        params.envName =='qa7'
                    }
                        }
                steps {
                echo 'echo Running unit tests'
                echo "tO JEST BRANCH ${env.NEW_VERSION}"
            }
        }
        stage('Regression tests') {
            steps {
                parallel(
                    chrome : {
                        sh 'echo Running E2E tests on chrome'
                    },
                    firefox : {
                        sh 'echo Running E2E tests on chrome'
                    },
                    safari : {
                        sh 'echo Running E2E tests on chrome'
                    }
                )
                
            }
        }
        stage('Release to prod') {
              when {
                    expression {
                        params.executeTest
                    }
                        }
            steps {
                sh 'echo Releasing to prod'
            }
        }
    }
    post {
        always {
            echo 'Cleanup after everything!'
        }
        failure {
           echo 'To jest porażka'
        }
        unstable {
            echo 'Gdy jesy unstable'
        }
        success {
            echo 'Gdy mamy sukcess'
        }
    }
    
  }